[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "git-summary"
version = "0.1.0"
description = "A comprehensive tool for querying the GitHub API to extract, analyze, and summarize user activity"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    { name = "Sam Texas", email = "dev@simpelcto.com" },
]
keywords = ["github", "api", "activity", "summary", "tracking"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Internet :: WWW/HTTP",
]
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.5.0",
    "rich>=13.0.0",
    "typer>=0.12.0",
    "python-dotenv>=1.0.0",
    "litellm>=1.75.5.post1",
    "pyyaml>=6.0.0",
]

[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pre-commit>=4.3.0",
    "mypy>=1.8.0",
    "vulture>=2.14",
    "radon>=6.0.1",
    "bandit>=1.7.5",
]

[project.urls]
Homepage = "https://github.com/samtexas/git-summary"
Repository = "https://github.com/samtexas/git-summary"
Issues = "https://github.com/samtexas/git-summary/issues"

[project.scripts]
git-summary = "git_summary.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["src/git_summary"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/pyproject.toml",
]

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-argument
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "Q",      # flake8-quotes
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise-without-from-inside-except
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["git_summary"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=git_summary",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-fail-under=20",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.mypy]
python_version = "3.12"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
# Disable arg-type checking for test data dictionary unpacking
disable_error_code = ["arg-type"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
confidence = "medium"
severity = "medium"
